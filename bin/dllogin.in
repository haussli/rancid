#! @EXPECT_PATH@ --
##
## patched to accomplish fortinet from nlogin
## in turn patched to accomplish D-Link from fnlogin
## by: Daniel G. Epstein <dan at rootlike.com>
## adapted by: Diego Ercolani <diego.ercolani at ssis.sm>
## adapted by: Gavin McCullagh <gmccullagh at gmail.com>
##             Griffith College Dublin
##
## @PACKAGE@ @VERSION@
@copyright@
#
# Netscreen hacks implemented by Stephen Gill <gillsr@yahoo.com>.
# Fortinet hacks by Daniel G. Epstein <dan at rootlike.com>
# D-Link hacks by Gavin McCullagh <gmccullagh at gmail.com>
#
# dllogin - D-Link login
#
# Most options are hopefully intuitive for logging into a D-Link switch
#
# Misc notes
#	netscreen does not have the concept of "enable", once logged in, a
#	users permissions can not change.

# Some CLIs having problems if we write too fast (Extreme, PIX, Cat)
set send_human {.2 .1 .4 .2 1}

@login_top@

# Log into the firewall.
# returns: 0 on success, 1 on failure
proc login { router user userpswd passwd enapasswd prompt cmethod cyphertype identfile } {
    global spawn_id in_proc do_command do_script sshcmd telnetcmd
    set in_proc 1
    set uprompt_seen 0

    # Telnet to the firewall & try to login.
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
	incr progs -1
	if [string match "telnet*" $prog] {
	    regexp {telnet(:([^[:space:]]+))*} $prog command suffix port
	    if {"$port" == ""} {
		set retval [ catch {eval spawn [split "$telnetcmd $router"]} reason ]
	    } else {
		set retval [ catch {eval spawn [split "$telnetcmd $router $port"]} reason ]
	    }
	    if { $retval } {
		send_user "\nError: telnet failed: $reason\n"
		return 1
	    }
	} elseif [string match "ssh*" $prog] {
	    # ssh to the router & try to login with or without an identfile.
	    regexp {ssh(:([^[:space:]]+))*} $prog methcmd suffix port
	    set cmd $sshcmd
	    if {"$port" != ""} {
		set cmd "$cmd -p $port"
	    }
	    if {"$cyphertype" != ""} {
		set cmd "$cmd -c $cyphertype"
	    }
	    if {"$identfile" != ""} {
		set cmd "$cmd -i $identfile"
	    }
	    set retval [catch {eval spawn [split "$cmd -x -l $user $router" { }]} reason]
	    if { $retval } {
		send_user "\nError: $cmd failed: $reason\n"
		return 1
	    }
	 } elseif ![string compare $prog "rsh"] {
	    send_error "\nError: unsupported method: rsh\n"
	    if { $progs == 0 } {
		return 1
	    }
	    continue;
	} else {
	    send_user "\nError: unknown connection method: $prog\n"
	    return 1
	}

    sleep 0.3

    # This helps cleanup each expect clause.
    expect_after {
	timeout {
	    global in_proc
	    send_user "\nError: TIMEOUT reached\n"
	    catch {close}; catch {wait};
	    if {$in_proc} {
	        return 1
	    } else {
	        continue
	    }
        } eof {
	    global in_proc
	    send_user "\nError: EOF received\n"
	    catch {close}; catch {wait};
	    if {$in_proc} {
	        return 1
	    } else {
	        continue
	    }
        }
    }

    # Here we get a little tricky.  There are several possibilities:
    # the firewall can ask for a username and passwd and then
    # talk to the TACACS server to authenticate you, or if the
    # TACACS server is not working, then it will use the enable
    # passwd.  Or, the firewall might not have TACACS turned on,
    # then it will just send the passwd.
    # if telnet fails with connection refused, try ssh
    expect {
	-re "(Connection refused|Secure connection \[^\n\r]+ refused)" {
	    catch {close}; catch {wait};
	    if !$progs {
		send_user "\nError: Connection Refused ($prog): $router\n"
		return 1
	    }
	}
	-re "(Connection closed by|Connection to \[^\n\r]+ closed)" {
	    catch {close}; catch {wait};
	    if !$progs {
		send_user "\nError: Connection closed ($prog): $router\n"
		return 1
	    }
	}
	eof { send_user "\nError: Couldn't login: $router\n"; wait; return 1 }
	-nocase "unknown host\r" {
	    send_user "\nError: Unknown host $router\n";
	    catch {close}; catch {wait};
	    return 1
	}
	"Host is unreachable" {
	    send_user "\nError: Host Unreachable: $router\n";
	    catch {close}; catch {wait};
	    return 1
	}
	"No address associated with name" {
	    send_user "\nError: Unknown host $router\n";
	    catch {close}; catch {wait};
	    return 1
	}
	-re "(Host key not found |The authenticity of host .* be established)" {
	    expect {
		-re "\\(yes\/no\[^\\)]*\\)\\?" {
					  send "yes\r";
					  send_user "\nHost $router added to the list of known hosts.\n"
					 }
		-re "\[^\r\n]*\[\r\n]+"	{ exp_continue; }
	    }
	    exp_continue
	}
	-re "HOST IDENTIFICATION HAS CHANGED" {
	    send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
	    expect {
		-re "\\(yes\/no\\)\\?"	{ send "no\r" }
		-re " strict checking\.\[\r\n]+" { }
		-re "\[^\r\n]*\[\r\n]+"	{ exp_continue; }
	    }
	    catch {close}; catch {wait};
	    return 1
	}
	-re "Offending key for " {
	    send_user "\nError: host key mismatch for $router.  Update the SSH known_hosts file accordingly.\n"
	    expect {
		-re "\\(yes\/no\\)\\?"	{ send "no\r" }
		-re "\[^\r\n]*\[\r\n]+"	{ exp_continue; }
	    }
	    catch {close}; catch {wait};
	    return 1
	}
	-nocase -re "^warning: remote host denied authentication agent forwarding." {
	    exp_continue;
	}
	-re "(denied|Sorry)"	{
				  send_user "\nError: Check your passwd for $router\n"
				  catch {close}; catch {wait}; return 1
				}
	"Login failed"		{
				  send_user "\nError: Check your passwd for $router\n";
				  catch {close}; catch {wait}; return 1
				 }
	-re "\[Uu]ser\[nN]ame:"		{
					  send -h -- "$user\r"
					  set uprompt_seen 1
					  exp_continue
					}
	-re "@\[^\r\n]+\[Pp]assword:"	{
					  # ssh pwd prompt
					  send -h -- "$userpswd\r"
					  exp_continue
					}
	"\[Pp]ass\[Ww]ord:"		{
					  if {$uprompt_seen == 1} {
						send -h -- "$userpswd\r"
					  } else {
						send -h -- "$passwd\r"
					  }
					  exp_continue
					}
	-- "$prompt"			{ break; }
     }
    }
    set in_proc 0
    return 0
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global do_interact in_proc
    set in_proc 1

    # Disable output paging.
    send -- "disable clipaging\r"
    expect -re $prompt;

    # handle escaped ;s in commands, and ;; and ^;
    regsub -all {([^\\]);} $command "\\1\u0002;" esccommand
    regsub -all {([^\\]);;} $esccommand "\\1;\u0002;" command
    regsub {^;} $command "\u0002;" esccommand
    regsub -all {[\\];} $esccommand ";" command
    regsub -all {\u0002;} $command "\u0002" esccommand
    set sep "\u0002"
    set commands [split $esccommand $sep]
    set num_commands [llength $commands]
    for {set i 0} {$i < $num_commands} { incr i} {
	send -- "[subst -nocommands [lindex $commands $i]]\r"
	expect {
            -re "$prompt"			{ send -h "\r" }
	    -re "All "				{ send "a"
						  exp_continue
	    -re "\[\n\r]+"			{ exp_continue }
						}
	}
    }

    if { $do_interact == 1 } {
	interact
	return 0
    }

    expect {
	  -re "$prompt$"			{
						  send -h "logout\r"
						  exp_continue
						}
	  -re "\[\n\r]+"			{ exp_continue }
	  -gl "Configuration modified, save?"	{
						  send "n\r"
						  exp_continue
						}
	  timeout				{ catch {close}; catch {wait};
						  return 0
						}
	  eof					{ return 0 }
    }
    set in_proc 0
}

#
# For each firewall... (this is main loop)
#
source_password_file $password_file
set in_proc 0
set exitval 0
foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    send_user "$router\n"

    # device timeout
    set timeout [find timeout $router]
    if { [llength $timeout] == 0 } {
	set timeout $timeoutdflt
    }

    # FortiOS 2.x prompts can end in either '#' or '$'
    set prompt "\[#\\$]"

    # Figure out passwords
    if { $do_passwd || $do_enapasswd } {
	set pswd [find password $router]
	if { [llength $pswd] == 0 } {
	    send_user -- "\nError: no password for $router in $password_file.\n"
	    continue
	}
	if { $do_passwd } {
	    set passwd [join [lindex $pswd 0] ""]
	} else {
	    set passwd $userpasswd
	}
	if { $do_enapasswd } {
	    set enapasswd [join [lindex $pswd 1] ""]
	} else {
	    set enapasswd $enapasswd
	}
    } else {
	set passwd $userpasswd
	set enapasswd $enapasswd
    }

    # Figure out username
    if {[info exists username]} {
      # command line username
      set ruser $username
    } else {
      set ruser [join [find user $router] ""]
      if { "$ruser" == "" } { set ruser $default_user }
    }

    # Figure out username's password (if different from the vty password)
    if {[info exists userpasswd]} {
      # command line username
      set userpswd $userpasswd
    } else {
      set userpswd [join [find userpassword $router] ""]
      if { "$userpswd" == "" } { set userpswd $passwd }
    }

    # Figure out identity file to use
    set identfile [join [lindex [find identity $router] 0] ""]

    # Figure out cypher type
    if {[info exists cypher]} {
      # command line cypher type
      set cyphertype $cypher
    } else {
      set cyphertype [find cyphertype $router]
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{telnet} {ssh}} }

    # Figure out the SSH executable name
    set sshcmd [find sshcmd $router]
    if { "$sshcmd" == "" } { set sshcmd {ssh} }

    # Figure out the telnet executable name
    set telnetcmd [join [lindex [find telnetcmd $router] 0] ""]
    if { "$telnetcmd" == "" } { set telnetcmd "@TELNET_CMD@" }

    # if [-mM], skip do not login
    if { $do_cloginrcdbg > 0 } { continue; }

    # Login to the router
    if {[login $router $ruser $userpswd $passwd $enapasswd $prompt $cmethod $cyphertype $identfile]} {
	incr exitval
	continue
    }

    # we are logged in, now figure out the full prompt based on what the device sends us.
    send "\r"
    expect {
	-re "\[\r\n]+"		{ exp_continue; }
	-re "^(.+$prompt)"	{ set junk $expect_out(0,string); }
	if {[$junk = "(^\\$ $)"]} {
	  set prompt $junk;
	} else {
	  if {[$junk = "(^# $)"]} { set prompt $junk ; }
	};
    }

    if { $do_command } {
	if {[run_commands $prompt $command]} {
	    incr exitval
	    continue
	}
    } elseif { $do_script } {
	# Disable output paging.
	send "config system console\r"
	send "set output standard\r"
	send "end\r"
	expect -re $prompt	{}
	source $sfile
	catch {close};
    } else {
	label $router
	log_user 1
	interact
    }

    # End of for each firewall
    catch {wait};
    sleep 0.3
}
exit $exitval
