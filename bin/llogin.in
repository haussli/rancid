#! /usr/bin/expect --
##
## $Id: llogin.in 3057 2015-03-13 20:32:14Z heas $
##
## @PACKAGE@ @VERSION@
@copyright@
#
# llogin - Linux/Unix login
#
# Sometimes routers take awhile to answer (the default is 10 sec)
set timeoutdflt 45
# Some CLIs having problems if we write too fast (Extreme, PIX, Cat)
set send_human {.2 .1 .4 .2 1}

@login_top@

# Log into the router.
# returns: 0 on success, 1 on failure, -1 if rsh was used successfully
proc login { router user passwd cmethod identfile } {
    global command spawn_id in_proc do_command do_script platform passphrase
    global prompt prompt_match u_prompt p_prompt e_prompt sshcmd usercmd usercmd_chat
    set in_proc 1
    set uprompt_seen 0
    set pprompt_seen 0

    # try each of the connection methods in $cmethod until one is successful
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
        incr progs -1
        if [string match "ssh*" $prog] {
            # ssh to the router & try to login with or without an identfile.
            regexp {ssh(:([^[:space:]]+))*} $prog methcmd suffix port
            set cmd $sshcmd
            if {"$port" != ""} {
                append cmd " -p $port"
            }
            if {"$identfile" != ""} { 
                append cmd " -i $identfile" 
            }
            set retval [catch {eval spawn [split "$cmd -x -l $user $router" { }]} reason]
            if { $retval } {
                send_user "\nError: $cmd failed: $reason\n"
                return 1
            }
        } elseif [string match "usercmd" $prog] {
            set retval [ catch {eval spawn $usercmd} reason ]
            if { $retval } {
                send_user "\nError: '$usercmd' failed: $reason\n"
                exit 1
            } elseif { [llength $usercmd_chat] > 0 } {
                sleep 0.3
                foreach {i j} $usercmd_chat {
                    if {[ catch {usercmd_pass $i $j}]} { break }
                }
            }
        } else {
            send_user "\nError: unknown connection method: $prog\n"
            return 1
        }
        sleep 0.3

        # This helps cleanup each expect clause.
        expect_after {
            timeout {
                send_user "\nError: TIMEOUT reached\n"
                catch {close}; catch {wait};
                if {$in_proc} { return 1 } 
                else { continue }
            } eof {
                send_user "\nError: EOF received\n"
                catch {close}; catch {wait};
                if {$in_proc} { return 1 }
                else { continue }
            }
        }

        # Here we get a little tricky.  There are several possibilities:
        # the router can ask for a username and passwd and then
        # talk to the TACACS server to authenticate you, or if the
        # TACACS server is not working, then it will use the enable
        # passwd.  Or, the router might not have TACACS turned on,
        # then it will just send the passwd.
        # if telnet fails with connection refused, try ssh
        expect {
            -re "(Connection refused|Secure connection \[^\n\r]+ refused)" {
                catch {close}; catch {wait};
                if !$progs {
                    send_user "\nError: Connection Refused ($prog): $router\n"
                    return 1
                }
            }
            -re "(Connection closed by|Connection to \[^\n\r]+ closed)" {
                catch {close}; catch {wait};
                if !$progs {
                    send_user "\nError: Connection closed ($prog): $router\n"
                    return 1
                }
            }
            eof { send_user "\nError: Couldn't login: $router\n"; wait; return 1 }
            -nocase "unknown host\r" {
                send_user "\nError: Unknown host $router\n";
                catch {close}; catch {wait};
                return 1
            }
            "Host is unreachable" {
                send_user "\nError: Host Unreachable: $router\n";
                catch {close}; catch {wait};
                return 1
            }
            "No address associated with name" {
                send_user "\nError: Unknown host $router\n";
                catch {close}; catch {wait};
                return 1
            }   
            -re "(Host key not found |The authenticity of host .* be established).* \\(yes/no\\)\\?" {
                send "yes\r"
                send_user "\nHost $router added to the list of known hosts.\n"
                exp_continue
            }
            -re "HOST IDENTIFICATION HAS CHANGED.* \\(yes/no\\)\\?" {
                send "no\r"
                send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
                catch {close}; catch {wait};
                return 1
            }
            -re "HOST IDENTIFICATION HAS CHANGED\[^\n\r]+" {
                send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
                return 1
            }
            -re "Offending key for .* \\(yes/no\\)\\?" {
                send "no\r"
                send_user "\nError: host key mismatch for $router.  Update the SSH known_hosts file accordingly.\n"
                catch {close}; catch {wait};
                return 1
            }
            -re "(denied|Sorry|Login failed)" {
                send_user "\nError: Check your passwd for $router\n"
                catch {close}; catch {wait};
                return 1
            }
            "Login invalid" {
                send_user "\nError: Invalid login: $router\n";
                catch {close}; catch {wait};
                return 1
            }
            #-re "@\[^\r\n]+ $p_prompt"  {
            #    # ssh pwd prompt
            #    sleep 1
            #    send -- "$userpswd\r"
            #    exp_continue
            #}
            -re "Enter passphrase.*: " {
                # sleep briefly to allow time for stty -echo
                sleep .3
                send -- "$passphrase\r"
                exp_continue
            }
            -re "$u_prompt" {
                if { $pprompt_seen == 0 } {
                    send -- "$user\r"
                    set uprompt_seen 1
                }
                exp_continue
            }
            -re "$p_prompt"     {
                sleep 1
                send -- "$passwd\r"
                set pprompt_seen 1
                exp_continue
            }
            -re "$prompt"       {
                set prompt_match $expect_out(0,string);
                break;
            }
            -re "\[^\r\n]*\[\r\n]+" { exp_continue; }
        } 
    }  

    set in_proc 0
    return 0
}

proc do_su { enapasswd } {
	global do_saveconfig in_proc
	global prompt u_prompt e_prompt enacmd
	set in_proc 1
	
	send "$enacmd\r"
	expect {
		-re "$e_prompt" { send -- "$enapasswd\r"; exp_continue }
		"#" { set prompt "#" }
		"command not found" {
			send_user "\nError: Unrecognized command, check your enable command\n";
			return 1
		}
	}
	
	# We set the prompt variable (above) so script files don't need
	# to know what it is.
	set in_proc 0
	return 0
}

proc get_prompt { prompt } {
    global platform
    # we are logged in, now figure out the full prompt
    set in_proc 1
    send "\r"
    regsub -all {^(\^*)(.*)} $prompt {\2} reprompt
    expect {
        -re "\[\r\n]+" { exp_continue; }
        -re "^.*$reprompt" { 
            set junk $expect_out(0,string);
            regsub -all {[][$^?+*():|\\]} $junk {\\&} prompt;
            #regsub -all {\[} $prompt {\\\\&} prompt
        }
    }
    
    set in_proc 0
    return $prompt
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global do_saveconfig in_proc platform timeoutdflt
    set in_proc 1

    set reprompt $prompt
    #append reprompt {[^[:graph:]]*$}
	
    # this is the only way i see to get rid of more prompts in o/p..grrrrr
    log_user 0

    # handle escaped ;s in commands, and ;; and ^;
    regsub -all {([^\\]);;} $command "\\1;\u002;" esccommand
    regsub {^;} $esccommand "\u002;" command
    set sep "\\1\u001"
    regsub -all {([^\\]);} $command "$sep" esccommand
    set sep "\u001"
    set commands [split $esccommand $sep]
    set num_commands [llength $commands]
    set in_config 0

    for {set i 0} {$i < $num_commands} {incr i} {
        if { [lindex $commands $i] == "\u002" } {
            send -- "\r"
        } else {
            set l_cmd [subst -nocommands [lindex $commands $i]]
            send -- "$l_cmd\r"
        }
        expect {
            -re "\b+" { exp_continue }
            -re "^\[^\n\r *]*$reprompt" {
                set timeout $timeoutdflt
                send_user -- "$expect_out(buffer)"
            }
            -re "^\[^\n\r]*$reprompt." { 
                send_user -- "$expect_out(buffer)"
                exp_continue
            }
            -re "-- More --" {
                send -- " "
                send_user -- "$expect_out(buffer)"
                exp_continue
            }
            -re {[^\r\n]*[\n\r]+} { 
                send_user -- "$expect_out(buffer)"
                exp_continue
            }
        }
    }
    send -h "\r"
    log_user 1
    send -h "exit\r"

    expect {
        -re {^[^\n\r *]*(\$|#|%|)\s$} {
            send -h "exit\r"
            exp_continue
        }
        -re {[\n\r]+} { exp_continue }
        timeout { 
            catch {close}; catch {wait};
            return 0
        }
        eof { return 0 }
    }
    set in_proc 0
}

#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
set exitval 0
set prompt_match ""
foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    # attempt at platform switching.
    set platform ""
    #send_user -- "$router\n"
    # device timeout
    set timeout [find timeout $router]
    if { [llength $timeout] == 0 } {
        set timeout $timeoutdflt
    }

    # Default prompt.
    set prompt [join [find prompt $router] ""]
    if { [llength $prompt] == 0 } {
        set prompt "(\\$|#|%|>)"
    }
	
	# look for autoenable option in .cloginrc & cmd-line
	set ae [find autoenable $router]
	if { "$ae" == "1" || $avautoenable } {
		set autoenable 1
	} else {
		set autoenable 0
	}
	
	# look for enable options in .cloginrc & cmd-line
	if { $avenable == 0 } {
		set enable 0
	} else {
		set ne [find noenable $router]
		if { "$ne" == "1" || "$autoenable" == "1" } {
			set enable 0
		} else {
			set enable 1
		}
	}

    # Figure out passwords
    if { $do_passwd || $do_enapasswd } {
        set pswd [find password $router]
        if { [llength $pswd] == 0 } {
            send_user -- "\nError: no password for $router in $password_file.\n"
            continue
        }
        if { $do_passwd } { set passwd [join [lindex $pswd 0] ""] } else { set passwd $userpasswd }
		if { $do_enapasswd } { set enapasswd [join [lindex $pswd 1] ""] }
    } else {
        set passwd $userpasswd
    }

    # Figure out username
    if {[info exists username]} {
        # command line username
        set ruser $username
    } else {
        set ruser [join [find user $router] ""]
        if { "$ruser" == "" } { set ruser $default_user }
    }
	
	# Figure out enable command
	set enacmd [join [find enablecmd $router] ""]
	if { "$enacmd" == "" } { set enacmd "sudo su" }

    # Figure out prompts
    set u_prompt [find userprompt $router]
    if { "$u_prompt" == "" } {
        set u_prompt "(\[Uu]sername|Login|login|user name|User):"
    } else {
        set u_prompt [join [lindex $u_prompt 0] ""]
    }
    set p_prompt [find passprompt $router]
    if { "$p_prompt" == "" } {
        set p_prompt "(\[Pp]assword|passwd|Enter password for \[^ :]+):"
    } else {
        set p_prompt [join [lindex $p_prompt 0] ""]
    }
	set e_prompt [find enableprompt $router]
	if { "$e_prompt" == "" } {
		set e_prompt "\[Pp]assword:"
	} else {
		set e_prompt [join [lindex $e_prompt 0] ""]
	}

    # Figure out cypher type
    if {[info exists cypher]} {
        # command line cypher type
        set cyphertype $cypher
    } else {
        set cyphertype [find cyphertype $router]
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{ssh} {telnet}} }

    # Figure out identity file to use
    set identfile [join [lindex [find identity $router] 0] ""]

    # Figure out the SSH executable name
    set sshcmd [join [lindex [find sshcmd $router] 0] ""]
    if { "$sshcmd" == "" } { set sshcmd {ssh} }

    # If user provides a router-specific connection method, use it
    set usercmd [find usercmd $router]
    set usercmd_chat [find usercmd_chat $router]

    # Login to the router
    if {[login $router $ruser $passwd $cmethod $identfile]} {
        incr exitval
        # if login failed or rsh was unsuccessful, move on to the next device
        continue
    }
	
	if { [regexp -- "#" $prompt_match junk] == 1} {
		set enable 0
	}
	
	
	if { $enable } {
		if {[do_su $enapasswd]} {
			if { $do_command || $do_script } {
				incr exitval
				catch {close}; catch {wait};
				continue
			}
		}
	}

    # we are logged in, now figure out the full prompt
    set prompt [get_prompt $prompt]

    if { $do_command || $do_script } {
        send -- "stty cols 255\r"
        expect -re $prompt      {}
        send -- "stty rows 60\r"
        expect -re $prompt      {}
    }

    if { $do_command } {
        if {[run_commands $prompt $command]} {
            incr exitval
            continue
        }
    } elseif { $do_script } {
        source $sfile
        catch {close};
    } else {
        label $router
        log_user 1
        interact
    }

    # End of for each router
    catch {wait};
    sleep 0.3
}

exit $exitval
