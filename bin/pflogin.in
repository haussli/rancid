#! @EXPECT_PATH@ --
##
## @PACKAGE@ @VERSION@
@copyright@
#
# pflogin - pfSense login
#
# This is taken from https://github.com/dotwaffle/rancid-git/ and
# adapted to the new style. All commits were from Jesse Norell according
# to the history for bin/pflogin.in at that github repository.
#

# Sometimes routers take awhile to answer (the default is 10 sec)
set timeoutdflt 120

@login_top@

# Log into the router.
# returns: 0 on success, 1 on failure
proc login { router user passwd cmethod cyphertype identfile} {
    global spawn_id in_proc do_command do_script passphrase prompt
    global sshcmd
    set in_proc 1

    # try each of the connection methods in $cmethod until one is successful
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
	incr progs -1
	if [string match "telnet*" $prog] {
	    regexp {telnet(:([^[:space:]]+))*} $prog command suffix port
	    if {"$port" == ""} {
		set retval [ catch {spawn telnet $router} reason ]
	    } else {
		set retval [ catch {spawn telnet $router $port} reason ]
	    }
	    if { $retval } {
		send_user "\nError: telnet failed: $reason\n"
		return 1
	    }
	} elseif [string match "ssh*" $prog] {
	    # ssh to the router & try to login with or without an identfile.
	    # We use two calls to spawn since spawn does not seem to parse
	    # spaces correctly.
	    regexp {ssh(:([^[:space:]]+))*} $prog methcmd suffix port
	    set cmd [join [lindex $sshcmd 0] " "]
	    if {"$port" != ""} {
		set cmd "$cmd -p $port"
	    }
	    if {"$identfile" != ""} {
		set cmd "$cmd -i $identfile"
	    }
	        set retval [ catch {eval spawn [split "$cmd -2 -c $cyphertype -x -l $user $router" { }]} reason ]
	    if { $retval } {
		send_user "\nError: $sshcmd failed: $reason\n"
		return 1
	    }
	} elseif ![string compare $prog "rsh"] {
	    send_error "\nError: unsupported method: rsh\n"
	    if { $progs == 0 } {
		return 1
	    }
	    continue
	} else {
	    send_user "\nError: unknown connection method: $prog\n"
	    return 1
	}
	sleep 1.0

	# This helps cleanup each expect clause.
	expect_after {
	    timeout {
			send_user "\nError: TIMEOUT reached\n"
			catch {close}; catch {wait};
			if { $in_proc} {
	            return 1
			} else {
	            continue
			}
        } eof {
			send_user "\nError: EOF received\n"
			catch {close}; catch {wait};
			if { $in_proc} {
	            return 1
			} else {
	            continue
			}
        }
	}

	# Here we get a little tricky.  There are several possibilities:
	# the router can ask for a username and passwd and then
	# talk to the TACACS server to authenticate you, or if the
	# TACACS server is not working, then it will use the enable
	# passwd.  Or, the router might not have TACACS turned on,
	# then it will just send the passwd.
	expect {
	    -re "(Connection refused|Secure connection \[^\n\r]+ refused|Connection closed by)" {
		catch {close}; catch {wait};
		if !$progs {
		   send_user "\nError: Connection Refused ($prog)\n"; return 1
		}
	    }
            eof { send_user "\nError: Couldn't login\n"; wait; return 1
	    } -nocase "unknown host\r\n" {
		catch {close}; catch {wait};
		send_user "\nError: Unknown host\n"; wait; return 1
	    } "Host is unreachable" {
		catch {close}; catch {wait};
		send_user "\nError: Host Unreachable!\n"; wait; return 1
	    } "No address associated with name" {
		catch {close}; catch {wait};
		send_user "\nError: Unknown host\n"; wait; return 1
	    }
	    "Login incorrect" {
			  send_user "\nError: Check your password for $router\n"
			  catch {close}; catch {wait}; return 1
			}
	    -re "Enter passphrase.*: " {
		# sleep briefly to allow time for stty -echo
		sleep 1
		send -- "$passphrase\r"
		exp_continue }
	    -re "(Host key not found |The authenticity of host .* be established).*\(yes\/no\)\?" {
		send "yes\r"
		send_user "\nHost $router added to the list of known hosts.\n"
		exp_continue }
	    -re "HOST IDENTIFICATION HAS CHANGED.* \(yes\/no\)\?" {
		send "no\r"
		send_user "\nError: The host key for $router has changed.  Update the SSH known_hosts file accordingly.\n"
		return 1 }
	    -re "Offending key for .* \(yes\/no\)\?" {
		send "no\r"
		send_user "\nError: host key mismatch for $router.  Update the SSH known_hosts file accordingly.\n"
		return 1 }
	    -re "(Username|\[\r\n]login):"	{
						  send -- "$user\r"
						  exp_continue
	    					}
	    -re "\[Pp]assword( for .+@.+)?:"	{
						  sleep 1; send -- "$passwd\r"
						  exp_continue
						}
		-re "Enter an option:" {
				send "8\r"
				exp_continue
		}
	    -re "$prompt"               { break; }
	    denied	{ send_user "\nError: Check your password for $router\n"
	                  catch {close}; catch {wait}; return 1
	                }
	}
    }

    # we are logged in, now figure out the full prompt
#    send "8\r"


    set in_proc 0
    return 0
}

# Run commands given on the command line.
proc run_commands { prompt command } {
    global in_proc
    set in_proc 1

    set commands [split $command \;]
    set num_commands [llength $commands]
    for {set i 0} {$i < $num_commands} { incr i} {
		send "[lindex $commands $i]\r"
		expect {
			-re "$prompt" { sleep 1; continue; }
			timeout	{ catch {close}; catch {wait}; return 0 }
			eof		{ return 0 }
		}
	}
	# causes expect to read everything from telnet into its internal buffer
	set timeout 5
	expect "SOMEthing-THAT-wont-EVER-match-Or.at.least.we.Hope.Not."
	# this matches the whole buffer
	expect "*"
	send "exit\r0\r"
    expect {
		"\n"	{ exp_continue }
		timeout	{ catch {close}; catch {wait}; return 0 }
		eof		{ return 0 }
    }
    set in_proc 0
}

#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
set exitval 0
foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    send_user "$router\n"

    # device timeout
    set timeout [find timeout $router]
    if { [llength $timeout] == 0 } {
	set timeout $timeoutdflt
    }

    # This regex matches cli prompts from various pfSense versions,
    # we'll set it to "pfSense# " further down
    set prompt "(\[.*\].*\:\s?|# )"

    # Figure out username
    if {[info exists username]} {
      # command line username
      set loginname $username
    } else {
      set loginname [join [find user $router] ""]
      if { "$loginname" == "" } { set loginname $default_user }
    }

    # Figure out loginname's password (if different from the vty password)
    if {[info exists userpasswd]} {
      # command line passwd
      set passwd $userpasswd
    } else {
      set passwd [join [lindex [find userpassword $router] 0] ""]
      if { "$passwd" == "" } {
        set passwd [join [lindex [find password $router] 0] ""]
        if { "$passwd" == "" } {
	  send_user "\nError: no password for $router in $password_file.\n"
	  continue
        }
      }
    }

    # Figure out identity file to use
    set identfile [join [lindex [find identity $router] 0] ""]

    # Figure out passphrase to use
    if {[info exists avpassphrase]} {
      #if { "$cyphertype" == "" } { set cyphertype "3des" }
	set passphrase $avpassphrase
    } else {
	set passphrase [join [lindex [find passphrase $router] 0] ""]
    }
    if { ! [string length "$passphrase"]} {
	set passphrase $passwd
    }

    # Figure out ssh cypher type
    if {[info exists cypher]} {
      # command line ssh cypher type
      set cyphertype $cypher
    } else {
      set cyphertype [find cyphertype $router]
      if { "$cyphertype" == "" } { set cyphertype "arcfour256" }
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{telnet} {ssh}} }

    # Figure out the SSH executable name
    set sshcmd [find sshcmd $router]
    if { "$sshcmd" == "" } { set sshcmd {ssh} }

    # Login to the router
    if {[login $router $loginname $passwd $cmethod $cyphertype $identfile]} {
		incr exitval
		continue
    }

    if { $do_command } {
        set prompt "pfSense# "
        send "set prompt='pfSense# '\r"
        expect -re "$prompt" { sleep 0.2; }
        send "set autologout='0'\r"
        expect -re "$prompt" { sleep 0.2; }
        if {[run_commands $prompt $command]} {
            incr exitval
            continue
        }
    } elseif { $do_script } {
        set prompt "pfSense# "
        send "set prompt='pfSense# '\r"
        expect -re "$prompt" { sleep 0.2; }
        send "set autologout='0'\r"
        expect -re "$prompt" { sleep 0.2; }
        source $sfile
        catch {close};
    } else {
		label $router
		log_user 1
		interact
    }

    # End of for each router
    catch {wait};
    sleep 0.3
}
exit $exitval
