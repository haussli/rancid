package arbor;
##
## @PACKAGE@ @VERSION@
@copyright@
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
#  arbor.pm - Arbor Networks appliances rancid procedures

use 5.010;
use strict 'vars';
use warnings;
require(Exporter);
our @ISA = qw(Exporter);

use rancid @VERSION@;

@ISA = qw(Exporter rancid main);
#XXX @Exporter::EXPORT = qw($VERSION @commandtable %commands @commands);

# load-time initialization
sub import {
    # force a terminal type so as not to confuse the POS with "network".
    # Seems that it might also support "dumb".
    $ENV{'TERM'} = "vt100";

    $timeo = 240;			# anlogin timeout in seconds

    0;
}

# post-open(collection file) initialization
sub init {
    # add content lines and separators
    ProcessHistory("","","","#RANCID-CONTENT-TYPE: $devtype\n#\n");
    0;
}

# main loop of input of device output
sub inloop {
    my($INPUT, $OUTPUT) = @_;
    my($cmd, $rval);

TOP: while(<$INPUT>) {
	tr/\015//d;
	if ( (/\>\s?logout$/) || $found_end ) {
	    $clean_run=1;
	    last;
	}
	if (/^Error:/) {
	    print STDOUT ("$host anlogin error: $_");
	    print STDERR ("$host anlogin error: $_") if ($debug);
	    $clean_run = 0;
	    last;
	}
	while (/[#>]\s*($cmds_regexp)\s*$/) {
	    $cmd = $1;
	    if (!defined($prompt)) {
		$prompt = ($_ =~ /^([^#>]+[#>])/)[0];
		$prompt =~ s/([][}{)(\\])/\\$1/g;
		print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
	    }
	    print STDERR ("HIT COMMAND:$_") if ($debug);
	    if (! defined($commands{$cmd})) {
		print STDERR "$host: found unexpected command - \"$cmd\"\n";
		$clean_run = 0;
		last TOP;
	    }
	    if (! defined(&{$commands{$cmd}})) {
		printf(STDERR "$host: undefined function - \"%s\"\n",  
		       $commands{$cmd});
		$clean_run = 0;
		last TOP;
	    }
	    $rval = &{$commands{$cmd}}($INPUT, $OUTPUT, $cmd);
	    delete($commands{$cmd});
	    if ($rval == -1) {
		$clean_run = 0;
		last TOP;
	    }
	}
    }
}

# This routine parses "config show"
sub ShowConfig {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($linecnt) = 0;
    print STDERR "    In ShowConfig: $_" if ($debug);

    while (<$INPUT>) {
	tr/\015//d;
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/invalid command/i);

	# some stupid timer error from this half-assed device
	next if (/comsh: timer error, idle timeout will be unavailable/i);

	# sort mgmt ACLs
	if (/ip access add (\S+) all (\S+)/) {
	    ProcessHistory("IPACCESS_$1","$aclsort","$2","$_"); next;
	}

	# sort IP addresses in policy and display one-per-line as comments so
	# that they are readable and it is easier to see what changed in the
	# policy. There does not appear to be a way to split these lines and
	# have the saved config still be loadable into the device.
	if (/(services sp managed_objects edit \"[^"]*\" match set cidr_blocks) (.*)/ ||
	    /(services sp managed_objects edit \"[^"]*\" match set cidr_v6_blocks) (.*)/ ||
	    /(services sp managed_objects edit \"[^"]*\" tags add \"[^"]*\") (.*)/ ||
	    /(services sp managed_objects edit \"[^"]*\" portal mitigation tms scope set) (.*)/) {
	    ProcessHistory("MG_OBJ","","","$_");
	    my(@ips) = split(/,/, $2);
	    next if ($#ips < 2);
	    ProcessHistory("MG_OBJ","","","# $1 \\\n");
	    my($ip, $n) = (0,0);
	    foreach $ip (@ips) {
		$n++;
		if ($n <= $#ips) {
		    ProcessHistory("MG_OBJ","$aclsort","$ip","#\t\t\t\t$ip,\\\n");
		} else {
		    ProcessHistory("MG_OBJ","$aclsort","$ip","#\t\t\t\t$ip\n");
		}
	    }
	    next;
	}

	if (/(services sp device edit .+ snmp community set )\S+/) {
	    if ($filter_commstr) {
		ProcessHistory("","","","# $1 <removed>$'"); next;
	    }
	}

	if (/^(services sp router edit \S+ bgp md5_secret set )\S+/
	    && $filter_pwds >= 1) {
	    ProcessHistory("","","","# $1<removed>$'");
	    next;
	}

	if (/^(services sp portal .+ edit .+ key set )\S+/
	    && $filter_pwds >= 1) {
	    ProcessHistory("","","","# $1<removed>$'");
	    next;
	}

	if (/^(services aaa tacacs server .* encrypted )\S+/
	    && $filter_pwds >= 1) {
	    ProcessHistory("","","","# $1<removed>$'");
	    next;
	}

	if (/^(services aaa local add .* encrypted )\S+/
	    && $filter_pwds >= 2) {
	    ProcessHistory("","","","# $1<removed>$'");
	    next;
	}

	ProcessHistory("","","","$_");
	$linecnt++;
    }

    # Arbor lacks a definitive "end of config" marker.
    if ($linecnt > 5) {
	$found_end = 1;
	return(1);
    }
    return(0);
}

# This routine parses "system disk show"
sub ShowFlash {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowFlash: $_" if ($debug);

    while (<$INPUT>) {
	tr/\015//d;
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/invalid command/i);

	# Filesystem status:
	#   Filesystem  Size/Used         Inodes/Used
	#    boot        476M/164M (37%)   126K/70 (1%)
	s/\/used\s+inodes\/used.*//i;
	s/(\s+\w+\s+)([\d.]+.)\/\S+\s+(\S+).*/$1$2/;

	# filter RAID resync messages
	# RAID status:
	#    boot        OK
	#    data        OK
	#    system      OK / RESYNC queued
	#    swap        OK
	s/(\s+\w+\s+\w+)\s+\/\s+resync queued/$1/i;

	ProcessHistory("Version","","","# $_");
    }
    ProcessHistory("Version","","","#\n");
    return(0);
}


# This routine parses "system hardware" & "system show"
sub ShowHardware {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowHardware: $_" if ($debug);

    while (<$INPUT>) {
	tr/\015//d;
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/invalid command/i);

	# observed intermittently on T4008 running 8.2.0.
	return(-1) if (/error getting board version/i);

	# some stupid timer error from this half-assed device
	next if (/comsh: timer error, idle timeout will be unavailable/i);

	next if (/^\s*boot time: /i);
	next if (/^\s*load averages: /i);

	ProcessHistory("Inventory","","","# $_");
    }
    ProcessHistory("Inventory","","","#\n");
    return(0);
}

# This routine parses "system version", "system build-parameters",
# "system file show"
sub ShowVersion {
    my($INPUT, $OUTPUT, $cmd) = @_;
    print STDERR "    In ShowVersion: $_" if ($debug);

    while (<$INPUT>) {
	tr/\015//d;
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/invalid command/i);

	# some stupid timer error from this half-assed device
	next if (/comsh: timer error, idle timeout will be unavailable/i);

	ProcessHistory("Version","","","# $_");
    }
    ProcessHistory("Version","","","#\n");
    return(0);
}

1;
