"""
RANCiD Python library

This is the mate to the Perl rancid.pm library with a Pythonic approach.
Therefore, it is not exactly equivalent, but close.

XXX This is a WiP and may change significantly.
"""
# rancid.py
##
## @PACKAGE@ @VERSION@
@copyright@
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
#  rancid.py - base/basic rancid procedures
#
import re, os, subprocess, sys

PACKAGE=str("@PACKAGE@")
VERSION=str("@VERSION@")

class RancidConf():
    """ RANCiD configuration file class.  Contains accessors for configuration
        variables and methods to load configuration files.  See rancid.conf(5).
    """
    def __init__(self, filename = None):
        self.debug = 0
        self.filename = filename
        # XXX move these default values to autoconf so they are common.
        # XXX should None be ""?
        # XXX some of these should be pushed to the environ when set.
        self.ACLFILTERREGEX = ""	# XXX s.b. null?
        self.ACLFILTERSEQ = "NO"
        self.ACLSORT = "YES"
        self.BASEDIR = "@localstatedir@"
        self.CVSROOT = self.BASEDIR + "/CVS"
        self.DIFFSCRIPT = None
        self.FILTER_OSC = "YES"
        self.FILTER_PWDS = "NO"
        self.LIST_OF_GROUPS = None
        self.LC_COLLATE = "POSIX"
        self.LOCKTIME = 4
        self.LOGDIR = self.BASEDIR + "/logs"
        self.MAILDOMAIN = None
        self.MAILHEADERS = "Precedence: bulk\nAuto-submitted: auto-generated\nX-Auto-Response-Suppress: All"
        self.MAILOPTS = None
        self.MAILSPLIT = 0
        self.MAX_ROUNDS = 4
        self.NOCOMMSTR = "NO"
        self.OLDTIME = 4
        self.PAR_COUNT = 5
        self.PATH = "@bindir@:@ENV_PATH@"
        self.RCSSYS = "@RCSSYS@"
        self.SENDMAIL = "@SENDMAIL@"
        self.TERM = "network"
        self.TMPDIR = "/tmp"
        if not filename == None:
            self.filename = filename
            self.load(filename)
        else:
            self.filename = "@sysconfdir@/rancid.conf"

    @property
    def debug(self):
        return self.__debug
    @debug.setter
    def debug(self, val):
        self.__debug = val
        if val:
            # unbuffered stdout
            sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    @property
    def filename(self):
        return self.__filename
    @filename.setter
    def filename(self, val):
        self.__filename = val

    @property
    def ACLFILTERREGEX(self):
        return self.__ACLFILTERREGEX
    @ACLFILTERREGEX.setter
    def ACLFILTERREGEX(self, val):
	# XXX check that the regexes compile?  compile them?
        # XXX setting implies ACLFILTERSEQ
        self.__ACLFILTERREGEX = val

    @property
    def ACLFILTERSEQ(self):
        return self.__ACLFILTERSEQ
    @ACLFILTERSEQ.setter
    def ACLFILTERSEQ(self, val):
        if val.upper() == "NO":
            # XXX can not be unset if ACLFILTERSEQ
            self.__ACLFILTERSEQ = 0
        else:
            self.__ACLFILTERSEQ = 1

    @property
    def ACLSORT(self):
        return self.__ACLSORT
    @ACLSORT.setter
    def ACLSORT(self, val):
        if val.upper() == "NO":
            self.__ACLSORT = None
        else:
            self.__ACLSORT = "XXX ipsort function"

    @property
    def FILTER_OSC(self):
        return self.__FILTER_OSC
    @FILTER_OSC.setter
    def FILTER_OSC(self, val):
        if val.upper() == "NO":
            self.__FILTER_OSC = 0
        elif val.upper() == "ALL":
            self.__FILTER_OSC = 2
        else:
            self.__FILTER_OSC = 1

    @property
    def FILTER_PWDS(self):
        return self.__FILTER_PWDS
    @FILTER_PWDS.setter
    def FILTER_PWDS(self, val):
        if val.upper() == "NO":
            self.__FILTER_PWDS = 0
        elif val.upper() == "ALL":
            self.__FILTER_PWDS = 2
        else:
            self.__FILTER_PWDS = 1

    @property
    def NOCOMMSTR(self):
        return self.__NOCOMMSTR
    @NOCOMMSTR.setter
    def NOCOMMSTR(self, val):
        if val.upper() == "YES":
            self.__NOCOMMSTR = 1
        else:
            self.__NOCOMMSTR = 0

    def load(self, filename = None):
        """Load the default RANCiD configuration file if filename is omitted,
           else the given FQPN.  This may be called multiple times, such as
           to load RANCiD group-specific configuration files.
           XXX This needs improvement.
        """
        if filename == None:
            filename = self.filename

        # XXX This is a wacky way to parse the config, but it is an easy hack
        cp = subprocess.run(args = ". " + filename + ";set",
                              stdout = subprocess.PIPE,
                              stderr = subprocess.PIPE,
                              shell = True, encoding = "utf-8");
        try:
            #out, err = sh.communicate(None, timeout = 15) # seconds
            cp.check_returncode()
            for line in cp.stdout.split(sep = '\n'):
                try:
                    var, val = line.split(sep = '=', maxsplit = 1)
                except ValueError:
                    continue
                    # XXX umask is not seen unless directly reading the conffile
                    #try:
                    #    var, val = line.split(sep = '0', maxsplit = 1)
                    #    if var == "umask":
                    #        os.umask(val)
                    #        pprint("umask ==== " + os.umask())
                    #except ValueError:
                    #    continue;
                if var == "ACLFILTERREGEX":
                    self.ACLFILTERREGEX = val
                elif var == "ACLFILTERSEQ":
                    self.ACLFILTERSEQ = val
                elif var == "ACLSORT":
                    self.ACLSORT = val
                elif var == "BASEDIR":
                    self.BASEDIR = val
                elif var == "CVSROOT":
                    self.CVSROOT = val
                elif var == "DIFFSCRIPT":
                    self.DIFFSCRIPT = val
                elif var == "FILTER_OSC":
                    self.FILTER_OSC = val
                elif var == "FILTER_PWDS":
                    self.FILTER_PWDS = val
                elif var == "LIST_OF_GROUPS":
                    self.LIST_OF_GROUPS = val
                elif var == "LC_COLLATE":
                    self.LC_COLLATE = val
                elif var == "LOCKTIME":
                    self.LOCKTIME = val
                elif var == "LOGDIR":
                    self.LOGDIR = val
                elif var == "MAILDOMAIN":
                    self.MAILDOMAIN = val
                elif var == "MAILHEADERS":
                    self.MAILHEADERS = val
                elif var == "MAILOPTS":
                    self.MAILOPTS = val
                elif var == "MAILSPLIT":
                    self.MAILSPLIT = val
                elif var == "MAX_ROUNDS":
                    self.MAX_ROUNDS = val
                elif var == "NOCOMMSTR":
                    self.NOCOMMSTR = val
                elif var == "OLDTIME":
                    self.OLDTIME = val
                elif var == "PAR_COUNT":
                    self.PAR_COUNT = val
                elif var == "PATH":
                    self.PATH = val
                elif var == "RCSSYS":
                    self.RCSSYS = val
                elif var == "SENDMAIL":
                    self.SENDMAIL = val
                elif var == "TERM":
                    self.TERM = val
                elif var == "TMPDIR":
                    self.TMPDIR = val
                # XXX handle other vars?   else:
        except TimeoutExpired:
            sh.kill()
            eprint("Timeout reading {}", filename)
            raise TimeoutExpired("reading " + filename)
        except CalledProcessError as estr:
            sh.kill()
            eprint("Failed reading {}: {} {}", filename, estr, err)
            raise CalledProcessError(estr + "reading " + filename)

class RancidTypesConf():
    """ RANCiD device types configuration class.
    """
    def __init__(self, devicetype = None):
script
login
module
inloop
command
        if not devicetype == None:
            self.type = devicetype
            self.load(devicetype)

    def loadtype(self, devicetype):
        # XXX
        raise NotImplementedError

class RouterDb():
    """ RANCiD device database class.
    """
    def __init__(self):
        # XXX
        raise NotImplementedError

class ProcessHistory():
    """ RANCiD input history
    """
    def __init__(self):
        # XXX
        raise NotImplementedError

def eprint(fmt, *args):
    """ Print msg to stderr with formatting
    """
    print(fmt.format(*args), file = sys.stderr)

def rancidinit():
    """ Initialize common RANCiD parameters and handle command-line arguments.
    """
    # XXX
    pass

def RunCommand(INPUT, OUTPUT, rancidconf, prompt, cmd):
    """This is a RANCiD filter function that parses a single device command
       that returns no required info; the input is discarded.
    """
    if rancidconf.debug:
        eprint("    In RunCommand: {}", cmd)

    promptre = re.compile("^" + prompt)
    crre = re.compile("\r")

    for line in INPUT:
        line = crre.sub("", line, count=0)
        if promptre.match(line):
            break
    return 0

##use 2.006 Socket qw(AF_INET AF_INET6 inet_pton);
##
##our @commandtable;			# command lists
##our %commands;
##our @commands;
##our $commandcnt;			# number of members in @commandtable
##our $commandstr;			# command string for lscript -c
##our $cmds_regexp;			# command regex for matching input
##our $devtype;				# device type argument
##our $filter_commstr;			# SNMP community string filtering
##our $filter_osc;			# oscillating data filtering mode
##our $filter_pwds;			# password filtering mode
##our $aclsort;				# ACL sorting mode
##our $aclfilterseq;			# ACL sequence filtering mode
##our $log;				# log cmdline option
##our $debug;				# debug cmdline option
##our $file;				# file cmdline option
##our $host;				# hostname from cmdline
##our $clean_run;				# successful run
##our $found_end;				# found end of the config
##our $timeo;				# login script timeout in seconds
##our $prompt;				# device prompt regex
##
##
##use vars qw{$script $lscript @modules};	# script, login script, module name(s)
##use vars qw{$inloop}		;	# inloop func
##use vars qw{$command $hist_tag};	# ProcessHistory state
##use vars qw{%history @history};		# ProcessHistory state
##our @EXPORT = qw($VERSION $devtype $script $lscript @modules $inloop
##		@commandtable
##		%commands @commands $commandcnt
##		$commandstr $cmds_regexp
##		$filter_commstr $filter_osc $filter_pwds $aclsort $aclfilterseq
##		$log $debug $file $host $clean_run $found_end $timeo $prompt
##		rancidinit loadtype
##
##		ProcessHistory bytes2human diskszsummary human2bytes
##		ipsort ipaddrval
##		keynsort keysort numerically numsort sortbyipaddr valsort

### initialize common rancid parameters and handle command-line arguments.
##sub rancidinit {
##    my($i);
##
##    if ($main::opt_V) {
##	print "@PACKAGE@ @VERSION@\n";
##	exit(0);
##    }
##
##    $command = $hist_tag = "";		# ProcessHistory state
##    for (keys(%history)) {
##        delete $history{$_};
##    }
##    @history = ();
##
##    $log = $main::opt_l;
##    $debug = $main::opt_d;
##    $devtype = $main::opt_t;
##    $file = $main::opt_f;
##    $host = defined($ARGV[0]) ? $ARGV[0] : "";
##    $clean_run = 0;
##    $found_end = 0;
##    $timeo = 90;			# login script timeout in seconds
##

##    if (!$main::opt_C && length($host) == 0) {
##	if ($main::file) {
##	    print(STDERR "Too few arguments: file name required\n");
##	    exit(1);
##	} else {
##	    print(STDERR "Too few arguments: host name required\n");
##	    exit(1);
##	}
##    }
##
##    if (!defined($main::opt_t) || length($main::opt_t) == 0) {
##	print(STDERR "Too few arguments: -t option is required\n");
##	exit(1);
##    }

### load rancid device-type spec/info from etc/rancid.types.* config files, then
### load modules & handle -C option, if present.
### usage: loadtype(device_type)
##sub loadtype {
##    my($devtype) = @_;
##    my($file, $line, $matched);
##
##    @commandtable = ();
##    $commandcnt = 0;
##
##    if (!defined($devtype) || length($devtype) == 0) {
##	print STDERR "loadtype(): device_type is empty\n";
##	return 1;
##    }
##    print STDERR "loadtype: device type $devtype\n" if ($debug);
##
##    # which device type configuration file has the definition of $devtype?
##    foreach $file ("@sysconfdir@/rancid.types.base",
##		   "@sysconfdir@/rancid.types.conf") {
##	$line = 0;
##	open(INPUT, "< $file") || die "Could not open $file: $!";
##	while (<INPUT>) {
##	    $line++;
##	    chomp;
##	    next if (/^\s*$/ || /^\s*#/);
##	    my($type, $directive, $value, $value2) = split('\;');
##	    $type =~ tr/[A-Z]/[a-z]/;
##	    $directive =~ tr/[A-Z]/[a-z]/;
##
##	    next if ($type ne $devtype);
##	    if (!$matched) {
##		$matched++;
##		printf(STDERR "loadtype: found device type %s in %s\n",
##		       $devtype, $file) if ($debug);
##	    }
##	    if ($directive eq "script") {
##		$script = $value;
##	    } elsif ($directive eq "login") {
##		$lscript = $value;
##	    } elsif ($directive eq "module") {
##		push(@modules, $value);
##	    } elsif ($directive eq "inloop") {
##		$inloop = $value;
##	    } elsif ($directive eq "command") {
##		push(@commandtable, {$value2, $value});
##	    } elsif ($directive eq "timeout") {
##		$timeo = $value;
##	    } else {
##		printf(STDERR "loadtype: unknown directive %s at %s:%s\n",
##		       $directive, $file, $line);
##		close(INPUT);
##		return(-1);
##	    }
##	}
##	close(INPUT);
##
##	# do not parse rancid.types.conf if we found any device type matches
##	# in rancid.types.base.
##	last if ($matched);
##    }
##
##    # load device-type specific modules
##    if (length($#modules)) {
##	my($module);
##
##	foreach $module (@modules) {
##	eval {
##	    (my $file = $module) =~ s/::/\//g;
##	    require $file . '.pm';
##	    # call module->import(); we expect 0 as success, as god intended it
##	    # XXX how the fuck is this done w/o the eval and w/o a temp var?
##	    eval($module ."::import();") ? 0 : 1;
##	} or do {
##	    # Module load failed
##	    my($error) = $@;
##	    print STDERR "loadtype: loading $module failed: ".
##			 "$error\n";
##	    return(-1);
##	};
##	}
##    }
##
##    # Use an array to preserve the order of the commands and a hash for mapping
##    # commands to the subroutine and track commands that have been completed.
##    @commands = map(keys(%$_), @commandtable);
##    %commands = map(%$_, @commandtable);
##    $commandcnt = scalar(keys(%commands));
##
##    $commandstr = join(";", @commands);
##    $cmds_regexp = join("|", map quotemeta($_), @commands);
##
##    # check that the functions exist
##    if ($commandcnt) {
##	my($func);
##	foreach $func (values(%commands)) {
##	    if (! defined(&{$func})) {
##		printf(STDERR "loadtype: undefined function in %s: %s\n",
##		       $devtype, $func);
##		close(INPUT);
##		return(-1);
##	    }
##	}
##    }
##
##    if ($main::opt_C) {
##	my($cmd);
##	if (!defined($lscript)) {
##	    printf(STDERR "$devtype: login script not defined\n");
##	    exit(1);
##	}
##	$cmd = $lscript;
##	if (defined($timeo)) {
##	    $cmd .= " -t $timeo";
##	}
##	print "$cmd -c \'$commandstr\' $host\n";
##	exit(0);
##    }
##
##    0;
##}
##
### This routine is used to print out the router configuration.  Each line is
### fed to ProcessHistory([tag], [output/sort func], [func argument], line/string)
### which outputs the line/strings if there is no tag or sort function, else it
### accumulates the lines/strings until either the optional tag changes or the
### optional output function changes.
##sub ProcessHistory {
##    my($new_hist_tag, $new_command, $command_string, @string) = (@_);
##
##    if ((($new_hist_tag ne $hist_tag) || ($new_command ne $command))
##	&& scalar(%history)) {
##	print eval "$command \%history";
##	undef %history;
##    }
##    if (($new_hist_tag) && ($new_command) && ($command_string)) {
##	if ($history{$command_string}) {
##	    $history{$command_string} = "$history{$command_string}@string";
##	} else {
##	    $history{$command_string} = "@string";
##	}
##    } elsif (($new_hist_tag) && ($new_command)) {
##	$history{++$#history} = "@string";
##    } else {
##	print "@string";
##    }
##    $hist_tag = $new_hist_tag;
##    $command = $new_command;
##
##    1;
##}
##
### convert bytes to human-readable format (ie GB/MB/KB/etc)
##sub bytes2human {
##    my($cnt) = @_;
##
##    if ($cnt >= (1024 * 1024 * 1024)) {
##	$cnt = int($cnt / (1024 * 1024 * 1024));
##	return("$cnt GB");
##    } elsif ($cnt >= (1024 * 1024)) {
##	$cnt = int($cnt / (1024 * 1024));
##	return("$cnt MB");
##    } elsif ($cnt >= (1024)) {
##	$cnt = int($cnt / 1024);
##	return("$cnt KB");
##    } elsif ($cnt > 0) {
##	return("<1KB");
##    } else {
##	return("0 KB");
##    }
##}
##
### summarize total flash/disk space as human-readable form and remaining space
### as a percentage.  unknown variables should be 'undef'.  returns a string,
### without a trailing <CR>.
##sub diskszsummary {
##    my($total, $free, $used) = @_;
##    my($pcnt);
##
##    # remove commas
##    $total = human2bytes($total) if (defined($total));
##    $free = human2bytes($free) if (defined($free));
##    $used = human2bytes($used) if (defined($used));
##
##    if (defined($free)) {
##	$pcnt = int($free / $total * 100);
##    } elsif (defined($used)) {
##	$pcnt = int(($total - $used) / $total * 100);
##    } else {
##	$total = $free + $used;
##	$pcnt = int($free / $total * 100);
##    }
##
##    $total = bytes2human($total);
##
##    return("$total total ($pcnt% free)");
##}
##
### convert human-readable format (like "300,024 GB/MB/KB/etc") to bytes
##sub human2bytes {
##    my($cnt) = @_;
##    my($mp);
##
##    $cnt =~ s/,//g;
##
##    if ($cnt =~ /gb/i) {
##	$mp = 1024 * 1024 * 1024;
##    } elsif ($cnt =~ /mb/i) {
##	$mp = 1024 * 1024;
##    } elsif ($cnt =~ /kb/i) {
##	$mp = 1024;
##    } else {
##	$mp = 1;
##    }
##    $cnt =~ /(\d+)/;
##    return($1 * $mp);
##}
##
##sub numerically { $a <=> $b; }
##
### keynsort(%hash) is a sort routine that will sort numerically on the
### keys of the hash as if it were a normal array.
##sub keynsort {
##    my(%lines) = @_;
##    my($i) = 0;
##    my($key, @sorted_lines);
##    foreach $key (sort numerically keys(%lines)) {
##	$sorted_lines[$i++] = $lines{$key};
##    }
##    @sorted_lines;
##}
##
### keysort(%hash) is a sort routine that will sort alpha-numerically on the
### keys of the hash as if it were a normal array.
##sub keysort {
##    my(%lines) = @_;
##    my($i) = 0;
##    my($key, @sorted_lines);
##    foreach $key (sort keys(%lines)) {
##	$sorted_lines[$i++] = $lines{$key};
##    }
##    @sorted_lines;
##}
##
### valsort(%hash) is a sort routine that will sort on the values of the hash
### as if it were a normal array.
##sub valsort {
##    my(%lines) = @_;
##    my($i) = 0;
##    my($key, @sorted_lines);
##    foreach $key (sort values(%lines)) {
##	$sorted_lines[$i++] = $key;
##    }
##    @sorted_lines;
##}
##
### numsort(%hash) is a numerical sort routine (ascending).
##sub numsort {
##    my(%lines) = @_;
##    my($i) = 0;
##    my($num, @sorted_lines);
##    foreach $num (sort {$a <=> $b} keys(%lines)) {
##	$sorted_lines[$i++] = $lines{$num};
##    }
##    @sorted_lines;
##}
##
### ipsort(%hash) is a sort routine that will sort on the IPv4/v6 address keys
### of the hash as if it were a normal array.
##sub ipsort {
##    my(%lines) = @_;
##    my($i) = 0;
##    my($addr, @sorted_lines);
##    foreach $addr (sort sortbyipaddr keys(%lines)) {
##	$sorted_lines[$i++] = $lines{$addr};
##    }
##    @sorted_lines;
##}
##
### ipaddrval(IPaddr) converts and IPv4/v6 address to a string for comparison.
### Some may ask why not use Net::IP; performance.  We tried and it was horribly
### slow.
##sub ipaddrval {
##    my($a) = @_;
##    my($norder);
##
##    if ($a =~ /:/) {
##	my($l);
##	($a, $l) = split(/\//, $a);
##	if (!defined($l)) {
##	    $l = 128;
##	}
##	$norder = inet_pton(AF_INET6, $a);
##	if (defined($norder)) {
##	    return unpack("H*", $norder) . unpack("H*", pack("C", $l));
##	}
##    } else {
##	my($l);
##	($a, $l) = split(/\//, $a);
##	if (!defined($l)) {
##	    $l = 32;
##	}
##	$norder = inet_pton(AF_INET, $a);
##	if (defined($norder)) {
##	    return(unpack("H*", $norder) . unpack("H*", pack("C", $l)));
##	}
##    }
##
##    # otherwise return the original key value, so as not to sort on null
##    return($_[0]);
##}
##
### sortbyipaddr(IPaddr, IPaddr) compares two IPv4/v6 addresses like strcmp().
##sub sortbyipaddr {
##    &ipaddrval($a) cmp &ipaddrval($b);
##}
